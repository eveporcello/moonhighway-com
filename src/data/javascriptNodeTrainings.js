import javascriptKickoff from '../images/javascript-node/javascript-kickoff.svg'
import nodeKickoff from '../images/javascript-node/node-kickoff.svg'
import javascriptPro from '../images/javascript-node/javascript-pro.svg'
import nodePro from '../images/javascript-node/node-pro.svg'
import nodeStacked from '../images/javascript-node/node-stacked.svg'
import nodeDataPro from '../images/javascript-node/node-data-pro.svg'
import emergingJavascript from '../images/react/emerging-javascript.svg'
import functionalJavascript from '../images/react/functional-javascript.svg'
import websocketsPro from '../images/javascript-node/websockets-pro.svg'
import usingGraphql from '../images/javascript-node/using-graphql.svg'
import graphqlWithNode from '../images/javascript-node/graphql-with-node.svg'

export default [
  {
    title: 'JavaScript Kickoff',
    slug: 'javascript-kickoff',
    description: `This course is designed for **developers**, **engineers**, **creatives**, and **managers** who have never had the chance to learn the core fundamentals of vanilla JavaScript. This course examines the core types available in JavaScript and how these types are used to create every library, framework, or application that uses the language. We examine JavaScript's quirks and discuss how JavaScript differs from other programming languages. Students leave this course with a solid understanding of the basics of vanilla JavaScript and become more confident at their jobs.`,
    thumb: `${javascriptKickoff}`,
    button: '',
    length: '1',
    tags: [
      'Primitives',
      'Flow Control',
      'Truthy/Falsy',
      'Arrays',
      'Objects',
      'Functions',
      'DOM Manipulation',
      'Debugging',
      'jQuery',
    ],
  },
  {
    title: 'Node Kickoff',
    slug: 'node-kickoff',
    description: `This course introduces the concepts of Node.js and is aimed at **developers**, **engineers**, **creatives**, and **managers** who have a basic understanding of the JavaScript language. In this course, we cover the core modules that ship with Node.js. We wrap this course up by introducing npm and using JavaScript modules that are developed by the community. Students leave this course with their environments setup for rapid development ready to build awesome apps.`,
    thumb: `${nodeKickoff}`,
    button: '',
    length: '1',
    tags: [
      'Environment Setup',
      'NVM',
      'Node Core',
      'Building CLIs',
      'EventEmitter',
      'Using Node Modules',
      'NPM',
      'Unit Testing',
    ],
  },
  {
    title: 'JavaScript Pro',
    slug: 'javascript-pro',
    description: `This course is designed for **developers** and **engineers** who have the basics of JavaScript under their belt and are ready to improve their code by implementing object-oriented design patterns in JavaScript. This course examines how JavaScript objects and functions work together with prototypal inheritance to allow you to develop applications with the same design patterns that you are currently familiar with like singletons, composites, MV*, and more.`,
    thumb: `${javascriptPro}`,
    button: '',
    length: '1',
    tags: [
      'Advanced Objects',
      'Prototype',
      'ES5 Enhancements',
      'ES6 Class Syntax',
      'Templates',
      'Design Patterns',
      'TDD with Jasmine',
    ],
  },
  {
    title: 'Node Pro',
    slug: 'node-pro',
    description: `This course is designed for **developers** and **engineers** who already have Node.js installed and are ready to dive deeper into its core modules and patterns. In this class, we examine the stream interface and how to work with synchronicity and asynchronicity in Node.js applications. Students implement the stream interface several times by working with the core modules that incorporate streams.`,
    thumb: `${nodePro}`,
    button: '',
    length: '1',
    tags: [
      'Stream Interface',
      'Spawning Processes',
      'stdin, stdout',
      'NPM',
      'fs module',
      'http requests',
      'http servers',
      'Async Unit Testing',
    ],
  },
  {
    title: 'Node Stacked',
    slug: 'node-stacked',
    description: `This course is designed for **developers** and **engineers** who have the basics of Node and JavaScript under their belt. In this course, we example techniques for developing full-stack JavaScript applications. Students build and modify an Express application that that serves data to a single-page browser application.`,
    thumb: `${nodeStacked}`,
    button: '',
    length: '2',
    tags: [
      'Express Generator',
      'Express Middleware',
      'Express Routers',
      'Mocha',
      'REST APIs',
      'Polling',
      'Long Polling',
      'SocketIO',
      'Single Page Applications',
      'Handlebars',
      'React',
    ],
  },
  {
    title: 'Node Data Pro',
    slug: 'node-data-pro',
    description: `This course is designed for **developers** and **engineers** who have the basics of Node and JavaScript under their belt. This class examines how Node.js applications interact with data layers. In this class, students setup Mongo databases and learn to work with Mongo. This course also introduces and compares mLab and Firebase, two popular database services.`,
    thumb: `${nodeDataPro}`,
    button: '',
    length: '1',
    tags: [
      'Installing Mongo',
      'Using Mongo Shell',
      'Importing Data',
      'CRUD Operations',
      'Using mLab',
      'Setting up Firebase',
      'Firebase Auth',
      'Using Firebase',
    ],
  },
  {
    title: 'Emerging JavaScript',
    slug: 'emerging-javascript',
    description: `This JavaScript course is designed for **developers** and **engineers** who have some JavaScript experience. It covers the latest syntax that is being used to make JavaScript code more beautiful and friendly across the web. Understanding ES2015, ES2016, and ES2017 will make your **team** much more proficient with React.`,
    thumb: `${emergingJavascript}`,
    button: '',
    length: '2',
    tags: [
      'Declarations',
      'Arrow Functions',
      'Destructuring',
      'import, export',
      'Promises',
      'Class Declarations',
      'Generators',
      'Spread Operator',
    ],
  },
  {
    title: 'Functional JavaScript',
    slug: 'functional-javascript',
    description: `This course introduces the functional programming paradigm and shows JavaScript **developers** and **engineers** how to use functional design patterns to produce more efficient and beautiful code. An understanding of functional programming techniques is vital to being highly proficient with React. This course serves as an excellent prerequisite for our React courses.`,
    thumb: `${functionalJavascript}`,
    button: '',
    length: '1',
    tags: [
      'Immutability',
      'Pure Functions',
      'Transforming Data',
      'Higher Order Functions',
      'Recursion',
      'Composition',
    ],
  },
  {
    title: 'WebSockets Pro',
    slug: 'websockets-pro',
    description: `This JavaScript course is designed for **developers** and **engineers** who are proficient with JavaScript and Node and are ready to build real-time interactive browser applications using WebSockets. WebSockets allow for real time two way data communications between clients and servers. In this course, we dive deep into TCP sockets and the WebSockets spec. Students gain an understanding of how WebSockets work before moving on to using libraries and frameworks like SocketIO and Firebase.`,
    thumb: `${websocketsPro}`,
    button: '',
    length: '2',
    tags: [
      'TCP Sockets',
      'Building WebSockets',
      'Connecting to WebSockets',
      'Using Socket IO',
      'Express',
      'Securing Sockets',
      'Streaming Media with WebSockets',
      'Working with Firebase',
    ],
  },
  {
    title: 'Using GraphQL',
    slug: 'using-graphql',
    description: `This course introduces the efficient data fetching and querying language, Graph QL. This course is designed for **developers**, **engineers**, **creatives**, **managers**, and anyone who wants to learn how to query a GraphQL service. This course covers how to build GraphQL queries and interact with existing GraphQL services.`,
    thumb: `${usingGraphql}`,
    button: '',
    length: '1',
    tags: [
      'What is GraphQL',
      'Why use GraphQL',
      'Basic Queries',
      'Schemas',
      'Connections',
      'Mutations',
    ],
  },
  {
    title: 'GraphQL with Node',
    slug: 'graphql-with-node',
    description: `This course is designed for **developers** and **engineers** who are proficient with JavaScript, comfortable with Node and JavaScript, and are familiar with using GraphQL. In this course, students learn how to build GraphQL endpoints with Node, Express, and GraphQL. Students learn to build and connect schemas and practice hands-on techniques for retrieving data from multiple sources.`,
    thumb: `${graphqlWithNode}`,
    button: '',
    length: '1',
    tags: [
      'GraphQl and Express',
      'Setting up GraphQL',
      'Building Schemas',
      'Multiple Sources',
      'Filtering Queries',
      'Connecting Data',
      'Building Mutations',
    ],
  },
]
